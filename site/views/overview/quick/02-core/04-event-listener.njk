---
title: ESL Event Listeners
hash: event-listeners
tags: overview-quick
parent: 00-core
---

<h3 class="text-center">{{ title }}</h3>

<p>
  ESL Event Listener is an embedded ESL module that take care of the event listeners management and provide extended utilities to work with events.
  Module supports event delegation, custom event targets. Listeners registration works on the "host" concept that allows you to link the listener to the specific component instance (to manage subscriptions automatically).
</p>

<div class="row">
  <div class="col-6">
    <div class="text-gray tag-h5">Before</div>
    <div style="overflow: auto; font-size: 1.2rem">
      {% code 'typescript', 'code-block' %}
        connectedCallback() {
          this.onBtnClick = this.onBtnClick.bind(this);
          this.addEventListener('click', this.onBtnClick);
          this.onResize = this.onResize.bind(this);
          this._resizeObserver = new ResizeObserver(this.onResize);
          this._resizeObserver.observe(this);
        }
        disconnectedCallback() {
          this.removeEventListener('click', this.onBtnClick);
          this._resizeObserver.disconnect();
        }
        onBtnClick(event) {
          if (event.target.closest('button')) {/* Btn click */}
        }
        onResize() {/* Resize subscription for component */}
      {% endcode %}
    </div>
  </div>
  <div class="col-6">
    <div class="text-gray tag-h5">With ESL</div>
    <div style="overflow: auto; font-size: 1.2rem">
      {% code 'typescript', 'code-block' %}
        @listen({event: 'click', selector: 'button'})
        onBtnClick(event) {/* Click subscription with delegation */}

        @listen({event: 'resize', target: ESLResizeObserverTarget.for})
        onResize(event) {/* Resize subscription for component */}
      {% endcode %}
    </div>
  </div>
</div>
