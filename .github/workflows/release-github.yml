name: Release Publisher (GitHub)

on:
  push:
    branches:
      - main
      - main-beta

permissions:
  contents: write
  packages: write

env:
  node-version: 20.x

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Release (Tag & GitHub Release)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node v${{ env.node-version }}
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: ${{ env.node-version }}

      - name: Install NPM Dependencies
        run: npm ci

      - name: Resolve Version
        id: info
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const version = require('./lerna.json').version;
            const latestTag = execSync('git describe --tags --abbrev=0').toString().trim();
            if (!leastTag || !version) throw new Error('No tags found');
            const isNewVersion = version !== latestTag;

            // Print status
            console.log('Version:', version);
            console.log('Latest Tag:', latestTag);
            console.log('Is New Version:', isNewVersion);
            // Set outputs
            core.setOutput('version', version);
            core.setOutput('isNewVersion', isNewVersion);
            core.setOutput('prerelease', version.includes('beta'));

      - name: Build
        if: ${{ steps.info.outputs.isNewVersion == 'true' }}
        run: npm run build

      - name: Build Tarballs
        if: ${{ steps.info.outputs.isNewVersion == 'true' }}
        run: npm run pack

      - name: Create Tag
        if: ${{ steps.info.outputs.isNewVersion == 'true' }}
        run: |
          git tag -a v${{ steps.info.outputs.version }} -m "chore(release): v${{ steps.info.outputs.version }}"
          git push origin v${{ steps.info.outputs.version }} --no-verify

      - name: Build Release Notes
        if: ${{ steps.info.outputs.isNewVersion == 'true' }}
        id: release-notes
        run: npm run version:notes

      - name: Create GitHub Release
        if: ${{ steps.info.outputs.isNewVersion == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          name: v${{ steps.info.outputs.version }}
          tag: v${{ steps.info.outputs.version }}
          bodyFile: 'RELEASE_NOTES.md'
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: ${{ steps.info.outputs.prerelease }}
